@page "/albumAdd"
@page "/albumAdd/{id:int}"

@inject NavigationManager navigationManager
@inject IAlbumService albumService


@if (album == null)
{
    <p><em><strong>Loading...</strong></em></p>
}
else
{
    <div class="container">
        <div class="card m-6 border-0">

            <EditForm Model="@album">
                <table class="table table-bordered">
                    <tr>
                        <td>Title</td>
                        <td><InputText class="form-control col-sm-5" @bind-Value="album.Title"></InputText></td>
                    </tr>
                    <tr>
                        <td>Cover</td>
                        <td><InputFile OnChange="LoadAlbumCover"></InputFile></td>
                    </tr>
                    <tr>
                        <td>Description</td>
                        <td><InputText class="form-control col-sm-5" @bind-Value="album.Description"></InputText></td>
                    </tr>
                    <tr>
                        <td>Release Date</td>
                        <td><InputDate class="form-control col-sm-5" @bind-Value="album.ReleaseDate"></InputDate></td>
                    </tr>
                    <tr>
                        <td>Author</td>
                        <td><InputText class="form-control col-sm-5" @bind-Value="album.Author"></InputText></td>
                    </tr>
                </table>

                <h3>Songs <button class="btn btn-success" @onclick="AddSong">+</button> </h3>

                @foreach (var cancion in album.Songs)
                {
                    <SongBlock song="cancion" onSongChanged="UpdateAddedSong" onSongRemoved="RemoveSong"></SongBlock>

                }
                <table>
                    <tbody>
                        <tr>
                            <td colspan="2" style="text-align:center">
                                <input type="submit" class="btn btn-success" value="Save" @onclick="AlbumSave" />
                            </td>
                            <td style="text-align:center">
                                <input type="button" class="btn btn-secondary" value="Cancel" @onclick="Cancel" />

                            </td>
                            @if (id > 0)
                        {
                                <td style="text-align:center"><input type="button" class="btn btn-danger" value="Delete" @onclick="DeleteAlbum"> </td>
                            }
                        </tr>
                    </tbody>
                </table>
            </EditForm>
        </div>

    </div>


    //<button @onclick="AddSong">Add Song</button>



}




@code {

    [Parameter]
    public int id { get; set; }

    public Album album;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (id > 0)
            {
                album = await albumService.GetAlbumDetails(id);
            }
            else
            {
                album = new Album()
                    {
                        ReleaseDate = DateTime.Now,
                        Songs = new List<Song>()
                    };

                album.Songs.Add(new Song() { Number = album.Songs.Count + 1 });
            }


        }
        catch (Exception)
        {

            throw;
        }
    }


    public void AddSong()
    {
        album.Songs.Add(new Song() { Number = album.Songs.Count + 1 });
    }

    public async void UpdateAddedSong(Song song)
    {
        var songToUpdate = album.Songs.FirstOrDefault(s => s.Number == song.Number);
        if (songToUpdate != null)
        {
            songToUpdate.Extension = song.Extension;
            songToUpdate.Name = song.Name;
            songToUpdate.Path = song.Path;
        }
    }

    protected async Task DeleteAlbum()
    {
        await albumService.DeleteAlbum(album);
        NavigateHome();
    }


    public void RemoveSong(Song song)
    {
        var songToRemove = album.Songs.FirstOrDefault(s => s.Number == song.Number);
        album.Songs.Remove(songToRemove);

    }



    async Task LoadAlbumCover(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizedFile = await e.File.RequestImageFileAsync(format, 200, 200);
        var buffer = new byte[resizedFile.Size];

        await resizedFile.OpenReadStream().ReadAsync(buffer);
        album.CoverImage = buffer;
    }




    protected async Task AlbumSave()
    {
        if (id > 0)
        {
            await albumService.UpdateAlbum(album);
        }
        else
        {
            await albumService.InsertAlbum(album);
            NavigateHome();
        }



       
    }


    public void Cancel()
    {
        NavigateHome();
    }

    public void NavigateHome()
    {
        navigationManager.NavigateTo("/");
    }
}
