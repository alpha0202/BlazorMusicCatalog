@page "/albumAdd"

@inject NavigationManager navigationManager
@inject IAlbumService albumService


@if (album == null)
{
    <p><em><strong>Loading...</strong></em></p>
}
else
{
    <EditForm Model="@album">
        <table class="table table-bordered">
            <tr>
                <td>Title</td>
                <td><InputText class="form-control col-sm-5" @bind-Value="album.Title"></InputText></td>
            </tr>
            <tr>
                <td>Description</td>
                <td><InputText class="form-control col-sm-5" @bind-Value="album.Description"></InputText></td>
            </tr>
            <tr>
                <td>Release Date</td>
                <td><InputDate class="form-control col-sm-5" @bind-Value="album.ReleaseDate"></InputDate></td>
            </tr>
            <tr>
                <td>Author</td>
                <td><InputText class="form-control col-sm-5" @bind-Value="album.Author"></InputText></td>
            </tr>
        </table>

        <h3>Songs <button class="btn btn-success" @onclick="AddSong">+</button> </h3>
       
        @foreach (var cancion in album.Songs)
        {
            <SongBlock song="cancion" onSongChanged="UpdateAddedSong"></SongBlock>
        }
        <table>
            <tbody>
                <tr>
                    <td colspan="2" style="text-align:center">
                        <input type="submit" value="Save" @onclick="AlbumSave" />
                        <input type="button" value="Cancel" @onclick="Cancel"/>
                    </td>
                </tr>
            </tbody>
        </table>
    </EditForm>


    //<button @onclick="AddSong">Add Song</button>



}




@code {
    public Album album = new Album() { ReleaseDate=DateTime.Now, Songs = new List<Song>() };


    protected override async Task OnInitializedAsync()
    {
        try
        {
            album.Songs.Add(new Song() { Number = album.Songs.Count + 1 });
        }
        catch (Exception)
        {

            throw;
        }
    }


    public void AddSong()
    {
        album.Songs.Add(new Song() { Number = album.Songs.Count + 1 });
    }

    public async void UpdateAddedSong(Song song)
    {
        var songToUpdate = album.Songs.FirstOrDefault(s => s.Number == song.Number);
        if (songToUpdate != null)
        {
            songToUpdate.Extension = song.Extension;
            songToUpdate.Name = song.Name;
            songToUpdate.Path = song.Path;
        }
    }

    protected async Task AlbumSave()
    {
        await albumService.InsertAlbum(album);
    }


    public void Cancel()
    {
        NavigateHome();
    }

    public void NavigateHome()
    {
        navigationManager.NavigateTo("/");
    }
}
